// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bizCard/ent/bizcard"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// BizCard is the model entity for the BizCard schema.
type BizCard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BizCard) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bizcard.FieldID, bizcard.FieldAge:
			values[i] = new(sql.NullInt64)
		case bizcard.FieldName, bizcard.FieldPhoneNumber, bizcard.FieldEmail:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BizCard", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BizCard fields.
func (bc *BizCard) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bizcard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bc.ID = int(value.Int64)
		case bizcard.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bc.Name = value.String
			}
		case bizcard.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				bc.PhoneNumber = value.String
			}
		case bizcard.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				bc.Email = value.String
			}
		case bizcard.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				bc.Age = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BizCard.
// Note that you need to call BizCard.Unwrap() before calling this method if this BizCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BizCard) Update() *BizCardUpdateOne {
	return (&BizCardClient{config: bc.config}).UpdateOne(bc)
}

// Unwrap unwraps the BizCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BizCard) Unwrap() *BizCard {
	tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BizCard is not a transactional entity")
	}
	bc.config.driver = tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BizCard) String() string {
	var builder strings.Builder
	builder.WriteString("BizCard(")
	builder.WriteString(fmt.Sprintf("id=%v", bc.ID))
	builder.WriteString(", name=")
	builder.WriteString(bc.Name)
	builder.WriteString(", phone_number=")
	builder.WriteString(bc.PhoneNumber)
	builder.WriteString(", email=")
	builder.WriteString(bc.Email)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", bc.Age))
	builder.WriteByte(')')
	return builder.String()
}

// BizCards is a parsable slice of BizCard.
type BizCards []*BizCard

func (bc BizCards) config(cfg config) {
	for _i := range bc {
		bc[_i].config = cfg
	}
}
