// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bizCard/ent/bizcard"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BizCardCreate is the builder for creating a BizCard entity.
type BizCardCreate struct {
	config
	mutation *BizCardMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bcc *BizCardCreate) SetName(s string) *BizCardCreate {
	bcc.mutation.SetName(s)
	return bcc
}

// SetPhoneNumber sets the "phone_number" field.
func (bcc *BizCardCreate) SetPhoneNumber(s string) *BizCardCreate {
	bcc.mutation.SetPhoneNumber(s)
	return bcc
}

// SetEmail sets the "email" field.
func (bcc *BizCardCreate) SetEmail(s string) *BizCardCreate {
	bcc.mutation.SetEmail(s)
	return bcc
}

// SetAge sets the "age" field.
func (bcc *BizCardCreate) SetAge(i int) *BizCardCreate {
	bcc.mutation.SetAge(i)
	return bcc
}

// Mutation returns the BizCardMutation object of the builder.
func (bcc *BizCardCreate) Mutation() *BizCardMutation {
	return bcc.mutation
}

// Save creates the BizCard in the database.
func (bcc *BizCardCreate) Save(ctx context.Context) (*BizCard, error) {
	var (
		err  error
		node *BizCard
	)
	if len(bcc.hooks) == 0 {
		if err = bcc.check(); err != nil {
			return nil, err
		}
		node, err = bcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BizCardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bcc.check(); err != nil {
				return nil, err
			}
			bcc.mutation = mutation
			if node, err = bcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bcc.hooks) - 1; i >= 0; i-- {
			if bcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BizCardCreate) SaveX(ctx context.Context) *BizCard {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BizCardCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BizCardCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BizCardCreate) check() error {
	if _, ok := bcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BizCard.name"`)}
	}
	if _, ok := bcc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "BizCard.phone_number"`)}
	}
	if _, ok := bcc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "BizCard.email"`)}
	}
	if _, ok := bcc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "BizCard.age"`)}
	}
	if v, ok := bcc.mutation.Age(); ok {
		if err := bizcard.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "BizCard.age": %w`, err)}
		}
	}
	return nil
}

func (bcc *BizCardCreate) sqlSave(ctx context.Context) (*BizCard, error) {
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bcc *BizCardCreate) createSpec() (*BizCard, *sqlgraph.CreateSpec) {
	var (
		_node = &BizCard{config: bcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bizcard.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bizcard.FieldID,
			},
		}
	)
	if value, ok := bcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bizcard.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bcc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bizcard.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := bcc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bizcard.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := bcc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bizcard.FieldAge,
		})
		_node.Age = value
	}
	return _node, _spec
}

// BizCardCreateBulk is the builder for creating many BizCard entities in bulk.
type BizCardCreateBulk struct {
	config
	builders []*BizCardCreate
}

// Save creates the BizCard entities in the database.
func (bccb *BizCardCreateBulk) Save(ctx context.Context) ([]*BizCard, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BizCard, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BizCardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BizCardCreateBulk) SaveX(ctx context.Context) []*BizCard {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BizCardCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BizCardCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
