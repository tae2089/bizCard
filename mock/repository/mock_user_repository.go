// Code generated by mockery v2.10.0. DO NOT EDIT.

package repository

import (
	domain "bizCard/domain"
	context "context"

	ent "bizCard/ent"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

// FindUser provides a mock function with given fields: email, ctx
func (_m *MockUserRepository) FindUser(email string, ctx context.Context) (*ent.User, error) {
	ret := _m.Called(email, ctx)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(string, context.Context) *ent.User); ok {
		r0 = rf(email, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(email, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: userRegister, ctx
func (_m *MockUserRepository) RegisterUser(userRegister domain.UserRegister, ctx context.Context) (*ent.User, error) {
	ret := _m.Called(userRegister, ctx)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(domain.UserRegister, context.Context) *ent.User); ok {
		r0 = rf(userRegister, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.UserRegister, context.Context) error); ok {
		r1 = rf(userRegister, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
