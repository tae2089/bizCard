// Code generated by mockery v2.10.0. DO NOT EDIT.

package repository

import (
	domain "bizCard/domain"
	context "context"

	ent "bizCard/ent"

	mock "github.com/stretchr/testify/mock"
)

// MockBizCardRepository is an autogenerated mock type for the BizCardRepository type
type MockBizCardRepository struct {
	mock.Mock
}

// DeleteBizCardByUid provides a mock function with given fields: uid, ctx
func (_m *MockBizCardRepository) DeleteBizCardByUid(uid int, ctx context.Context) error {
	ret := _m.Called(uid, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, context.Context) error); ok {
		r0 = rf(uid, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBIzCardByUid provides a mock function with given fields: uid, ctx
func (_m *MockBizCardRepository) FindBIzCardByUid(uid int, ctx context.Context) (*ent.BizCard, error) {
	ret := _m.Called(uid, ctx)

	var r0 *ent.BizCard
	if rf, ok := ret.Get(0).(func(int, context.Context) *ent.BizCard); ok {
		r0 = rf(uid, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.BizCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(uid, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterBizCard provides a mock function with given fields: dto, ctx
func (_m *MockBizCardRepository) RegisterBizCard(dto *domain.BizCardRegister, ctx context.Context) (*ent.BizCard, error) {
	ret := _m.Called(dto, ctx)

	var r0 *ent.BizCard
	if rf, ok := ret.Get(0).(func(*domain.BizCardRegister, context.Context) *ent.BizCard); ok {
		r0 = rf(dto, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.BizCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.BizCardRegister, context.Context) error); ok {
		r1 = rf(dto, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBizCard provides a mock function with given fields: uid, bizCardUpdate, ctx
func (_m *MockBizCardRepository) UpdateBizCard(uid int, bizCardUpdate *domain.BizCardUpdate, ctx context.Context) (*ent.BizCard, error) {
	ret := _m.Called(uid, bizCardUpdate, ctx)

	var r0 *ent.BizCard
	if rf, ok := ret.Get(0).(func(int, *domain.BizCardUpdate, context.Context) *ent.BizCard); ok {
		r0 = rf(uid, bizCardUpdate, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.BizCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *domain.BizCardUpdate, context.Context) error); ok {
		r1 = rf(uid, bizCardUpdate, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
